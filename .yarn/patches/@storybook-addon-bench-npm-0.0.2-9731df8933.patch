diff --git a/dist/sbbench.js b/dist/sbbench.js
index d66cd7059c211856efc9da6870cae722ff69c034..7a71e0273b2680994f11c9036334963298a6efbd 100644
--- a/dist/sbbench.js
+++ b/dist/sbbench.js
@@ -4,6 +4,13 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.logEvent = exports.STORY_RENDER = exports.PREVIEW_RENDER = exports.MANAGER_RENDER = exports.PORT = exports.HOST = void 0;
+
+function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
+
+function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
+
+function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
+
 var HOST = '127.0.0.1';
 exports.HOST = HOST;
 var PORT = 9898;
@@ -16,8 +23,53 @@ var STORY_RENDER = 'storyRender';
 exports.STORY_RENDER = STORY_RENDER;
 
 var logEvent = function logEvent(event) {
-  console.log('Logging', event);
-  fetch("http://".concat(HOST, ":").concat(PORT, "/").concat(event));
+  function sendPing() {
+    console.log('Logging', event);
+    fetch('http://'.concat(HOST, ':').concat(PORT, '/').concat(event));
+  }
+
+  if ('performance' in window) {
+    var paintMetrics = performance.getEntriesByType('paint');
+    var FCPs = paintMetrics !== undefined ? paintMetrics.filter(function (m) {
+      return m.name === 'first-contentful-paint';
+    }) : []; // Check if first-contentful-paint has already happened
+
+    if (FCPs.length > 0) {
+      console.log('first-contentful-paint already happened, time may be inflated');
+      sendPing();
+    } else {
+      var observer = new PerformanceObserver(function (list, obs) {
+        var entries = list.getEntries().filter(function (e) {
+          return e.name === 'first-contentful-paint';
+        });
+
+        var _iterator = _createForOfIteratorHelper(entries),
+            _step;
+
+        try {
+          for (_iterator.s(); !(_step = _iterator.n()).done;) {
+            var entry = _step.value;
+
+            if (entry.name === 'first-contentful-paint') {
+              sendPing();
+              obs.disconnect();
+            }
+          }
+        } catch (err) {
+          _iterator.e(err);
+        } finally {
+          _iterator.f();
+        }
+      });
+      observer.observe({
+        type: 'paint'
+      });
+    }
+  } else {
+    // Not able to use paint timing, just send the fetch now.
+    console.log('skipping first-contentful-paint');
+    sendPing();
+  }
 };
 
 exports.logEvent = logEvent;
